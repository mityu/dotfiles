#!/usr/bin/env bash

shopt -s extglob

function has-cmd {
	type $1 &> /dev/null
}

function list-sudoists {
	echo apt pacman
}

function need-password {
	for c in $(list-sudoists); do
		has-cmd $c && return $?
	done
	false
}

function should-update {
	if has-cmd $1; then
		if list-sudoists | grep $1 &> /dev/null; then
			allow-sudo
		else
			true
		fi
	else
		false
	fi
}

function ask {
	read -p "$1 (yes/no): " answer
	case "$answer" in
		[yY]?([eE][sS]))  # Matches "y" or "yes" with ignoring cases.
			true;;
		[nN]?([oO]))  # Matches "n" or "no" with ignoreing cases.
			false;;
		*)
			echo "Invalid input: $answer"
			ask $1;;
	esac
}

# This function will be overwritten in "confirm-allowing-sudo" function when
# user allows to use sudo.  This provides just a default response of allowing
# sudo.
function allow-sudo {
	false
}

function confirm-allowing-sudo {
	if ask 'Allow sudo?'; then
		function allow-sudo {
			true
		}
	fi
	allow-sudo
}

function gobin-path {
	local gobin=$(go env GOBIN)
	gobin=${gobin:-$(go env GOPATH)/bin}
	echo $gobin
}

function do-update {
	local password=''

	if need-password; then
		if confirm-allowing-sudo; then
			sudo --reset-timestamp
			echo -n 'Password:'; read --silent password;
			while ! sudo --stdin --validate --prompt='' &> /dev/null <<< $password; do
				echo
				echo 'Sorry, try again.'
				echo -n 'Password:'; read --silent password;
			done
		else
			echo "Skip invoking update commands for package managers that require sudo: $(list-sudoists)"
		fi
	fi

	if ! (has-cmd nix && [[ -f ~/.nix-profile/bin/vim ]]); then
		should-update update-vim && update-vim
	fi
	if ! (has-cmd nix && [[ -f ~/.nix-profile/bin/nvim ]]); then
		[[ $(uname -o) != "Msys" ]] && should-update update-neovim && update-neovim
	fi
	should-update update-macvim && update-macvim

	if should-update brew; then
		brew upgrade
		brew cleanup
		if [[ "$(uname)" == "Darwin" ]]; then
			brew upgrade --cask
		fi
	fi

	if should-update apt; then
		sudo --stdin apt update <<< $password
		sudo --stdin apt upgrade <<< $password
	fi

	if should-update pacman; then
		if has-cmd yay; then
			# Prefer using yay to pacman
			yay -Syyu --noconfirm --sudoflags --stdin <<< $password
		else
			sudo --stdin pacman -Syyu --noconfirm <<< $password
		fi
	fi

	if should-update go; then
		pushd ~
		find $(gobin-path) -type f | while read file; do
			local pkg="$(go version -m "${file}" | head -n2 | tail -n1 | awk '{print $2}')"
			go install "${pkg}@latest"
		done
		popd
	fi

	should-update rustup && rustup update

	if cargo install-update --version &> /dev/null; then
		local arg=
		if cargo +nightly --version &> /dev/null; then
			arg='+nightly'
		fi
		cargo $arg install-update --git --all
	fi

	if should-update opam; then
		opam update && opam upgrade --yes
	fi

	if should-update pip3; then
		pip3 list --outdated --format json | python3 <(cat <<- EOF
			import sys
			import json
			excludes = ['pip', 'wheel', 'idle', 'pydoc']  # Modules managed by Homebrew.
			data = json.loads(sys.stdin.read())
			pkgs = filter(lambda pkg: not pkg in excludes, map(lambda x: x['name'], data))
			list(map(lambda x: print(x), pkgs))
			EOF
			) | xargs pip3 install -U
	fi

	should-update update-vim-plugins && update-vim-plugins
}

do-update
