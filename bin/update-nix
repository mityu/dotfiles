#!/usr/bin/env bash

set -e

config_dir=$(dirname $(dirname $(realpath ${BASH_SOURCE[0]})))/nix

function is-darwin() {
	[[ $(uname) == Darwin ]]
}

function usage() {
	if is-darwin; then
		echo 'update-nix [flake|home|help|-h|--help]'
	else
		echo 'update-nix [flake|home|system [DE]|help|-h|--help]'
		echo ''
		echo 'Available DEs:'
		echo ''
		echo "  $(cd "$config_dir"; nix eval .#list-des 2>/dev/null)"
	fi
}

function message-on-nix-failure() {
	if [[ $1 -ne 0 ]]; then
		echo ''
		echo 'Nix command failed.'
		echo "Don't you forget 'git add'?"
	fi
}

function detect-nixos-build-target() {
	local de
	local pc

	de=awesome
	if [[ -n $1 ]]; then
		de="$1"
	fi

	pc=$(hostnamectl status | grep 'Hardware Model:' | sed 's/^[[:space:]]*Hardware[[:space:]]*Model:[[:space:]]*//')
	if [[ "$pc" == "HP ENVY Laptop"* ]]; then
		echo "laptop-hp-envy-$de"
	elif [[ "$pc" == "Endeavor ST190E" ]]; then
		echo "desktop-endeavor-$de"
	fi
}

function do-nix-update() {
	set +e
	cd "$config_dir"
	case $1 in
		"flake")
			nix flake update
			;;
		"home")
			nix run nixpkgs#home-manager -- switch -b backup --flake .#myHome
			message-on-nix-failure $?
			;;
		"system")
			if is-darwin; then
				echo 'Not available on Darwin.'
				exit 1
			fi

			shift
			sudo nixos-rebuild switch --flake .#$(detect-nixos-build-target "$@")
			message-on-nix-failure $?
			;;
		*)
			echo 'unreachable'
			exit 1
			;;
	esac
}

case $1 in
	"flake" | "home" | "system")
		do-nix-update "$@";;
	"help" | "--help" | "-h")
		usage;;
	*)
		echo "Invalid argument: $*"
		usage
		;;
esac

