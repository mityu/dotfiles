#!/usr/bin/env bash

set -e

NIX_CONFIG='extra-experimental-features = nix-command flakes'
config_dir=$(dirname $(dirname $(realpath ${BASH_SOURCE[0]})))/nix

function echo-bold {
	printf "\e[1m$@\e[0m\n"
}

function is-super-user {
	[[ $(id -u) == 0 ]]
}

function is-darwin() {
	[[ $(uname) == Darwin ]]
}

function usage {
	if is-darwin; then
		echo 'update-nix [flake|home|both|all|help|-h|--help]'
	else
		echo 'update-nix [flake|home|system [DE]|all|both|help|-h|--help]'
		echo ''
		echo 'Available DEs:'
		echo ''
		echo "  $(cd "$config_dir"; nix eval .#list-des 2>/dev/null)"
	fi
}

function message-on-nix-failure {
	if [[ $1 -ne 0 ]]; then
		echo ''
		echo 'Nix command failed.'
		echo "Don't you forget 'git add'?"
	fi
}

function detect-wm {
	local indicator
	indicator="${XDG_CURRENT_DESKTOP,,}"  # Make lowercase
	if [[ "$indicator" == *xfce* ]]; then
		echo 'xfce'
	elif [[ "$indicator" == *awesome* ]]; then
		echo 'awesome'
	elif [[ "$indicator" == *i3* ]]; then
		echo 'i3'
	fi
}

function detect-build-target {
	if is-darwin; then
		echo 'darwin'
		return
	fi

	local de
	local pc

	de=$(detect-wm)
	[[ -n $1 ]] && de="$1"
	[[ -z $de ]] && de=xfce

	pc=$(hostnamectl status | grep 'Hardware Model:' | sed 's/^[[:space:]]*Hardware[[:space:]]*Model:[[:space:]]*//')
	if [[ "$pc" == "HP ENVY Laptop"* ]]; then
		echo "laptop-hp-envy-$de"
	elif [[ "$pc" == "Endeavor ST190E" ]]; then
		echo "desktop-endeavor-$de"
	elif [[ "$pc" == "B760M Pro"* ]]; then
		echo "desktop-b760m-pro-$de"
	fi
}

function do-nix-update {
	local sudo
	! is-super-user && sudo=sudo

	cd "$config_dir"
	case $1 in
		"flake")
			nix flake update
			;;
		"home")
			shift
			nix run nixpkgs#home-manager -- switch -b backup --flake .#$(detect-build-target "$@")
			;;
		"system")
			if is-darwin; then
				echo 'Not available on Darwin.'
				exit 1
			fi

			shift
			$sudo nixos-rebuild switch --flake .#$(detect-build-target "$@")
			;;
		*)
			echo 'unreachable'
			exit 1
			;;
	esac
}

function do-nix-update-with-message {
	echo-bold "Updating $1"
	do-nix-update "$1"
	echo-bold "Updating $1 done"
}

function do-nix-update-multi {
	if is-darwin; then
		do-nix-update-with-message flake
		do-nix-update-with-message home
	else
		if ! is-super-user; then
			sudo "$(realpath ${BASH_SOURCE[0]})" "$1"

			# home-manager must not be run as super user.
			do-nix-update-with-message home
		else
			[[ "$1" == "all" ]] && do-nix-update-with-message flake
			do-nix-update-with-message system
		fi
	fi
}

trap 'message-on-nix-failure $?' EXIT

case $1 in
	"flake" | "home" | "system")
		do-nix-update "$@";;
	"all" | "both")
		do-nix-update-multi "$1";;
	"help" | "--help" | "-h")
		usage;;
	*)
		echo "Invalid argument: $*"
		usage
		;;
esac

