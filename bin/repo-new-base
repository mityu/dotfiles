#!/usr/bin/env bash

set -e

function echoerr {
	echo "$@" 1>&2
}

function usage {
	echo "$(basename ${BASH_SOURCE[0]}) [<options>] <project>|<user>/<project>|<host>/<user>/<project>"
	echo ''
	echo '<options>:'
	echo '  --cargo|--rust    Create a cargo project'
	echo '  --dune|--ocaml    Create a dune project'
	echo '  --haskell|--stack Create a stack project'
	echo '  --cabal           Create a cabal project (haskell)'
	echo '  --go              Create a Go language project'
	echo '  -h|--help         Show this help'
}

declare -A __enabled_commands

function ensure-command {
	if ! type $@ > /dev/null; then
		echoerr "Command not found: $@"
		exit 1
	fi
}

function enable-command {
	ensure-command $@
	__enabled_commands[$@]=true
}

function is-command-enabled {
	[[ -v __enabled_commands[$@] ]]
}

function init-repo {
	cd "$@"
	git init --initial-branch main
  git commit --allow-empty -m "Initial commit"
	if is-command-enabled cargo; then
		cargo init .
	elif is-command-enabled dune; then
		local name=$(basename $(pwd) | sed 's/^ocaml-//')
		dune init project "$name" .
	elif is-command-enabled stack; then
		stack init .
	elif is-command-enabled cabal; then
		cabal init .
	elif is-command-enabled go; then
		local name=$(basename $(pwd) | sed 's/^go-//')
		go mod init "$name"
		go mod tidy
	fi
}

function output-result {
	jq -n "$@" '$ARGS.named' | jq '.output |= split("\n")'
}

function main {
	ensure-command git
	ensure-command ghq
	ensure-command jq

	local repo=''
	while (( $# > 0 )); do
		case $1 in
			-h|--help)
				output-result --arg status 0 --arg output "$(usage)"
				exit 0
				;;
			--cargo|--rust)
				enable-command cargo
				;;
			--dune|--ocaml)
				enable-command dune
				;;
			--haskell|--stack)
				enable-command stack
				;;
			--cabal)
				enable-command cabal
				;;
			--go)
				enable-command go
				;;
			-*)
			  output-result	\
					--arg status 1 \
					--arg output "$(echo "Invalid option: $1"; usage)"
				exit 0
				;;
			*)
				repo=$1
				break
				;;
		esac
	done
	if [[ $repo == '' ]]; then
		output-result --arg status 0 --arg output "$(usage)"
		exit 0
	fi

	local root=$(ghq root)
	if [[ $(dirname $repo) == '.' ]]; then
		root="$root/github.com/mityu"
	elif [[ $(dirname $(dirname $repo)) == '.' ]]; then
		root="$root/github.com"
	fi

	local dir="$root/$repo"
	mkdir -p "$dir"
	local output=$(init-repo "$dir")
	output-result \
		--arg status 0 \
		--arg output "$output" \
		--arg repository "$dir"
}

main "$@"
