*vimrc-autoloads.txt*	My vimrc reference.

==============================================================================
CONTENTS					*vimrc-contents*

mru.vim				|mru.vim|
  FUNCTIONS			  |mru-functions|
  VARIABLES			  |mru-variables|
  MAPPINGS			  |mru-mappings|
shcmd.vim			|shcmd.vim|
  COMMANDS			  |shcmd-commands|



==============================================================================
mru.vim								*mru.vim*
	 |mru.vim| is a manager of MRU (Most Recently Used) files and you can
	 open one easily via |gram.vim| interface.

------------------------------------------------------------------------------
FUNCTIONS							*mru-functions*

vimrc#mru#start()			*vimrc#mru#start()* *mru#start()*
	Start to use |gram.vim| interface to open a MRU file.

				*vimrc#mru#delete_unexist_file_history()*
					*mru#delete_unexist_file_history()*
vimrc#mru#delete_unexist_file_history()
	Delete unexist files from MRU history.

vimrc#mru#edit_history_start([{open-command}])
	Start to edit MRU history in a new buffer.
	{open-command} is a command which is used to open the MRU history file.
	Type ':wq<CR>' to finish editing the file with saving changes.

------------------------------------------------------------------------------
VARIABLES							*mru-variables*

g:mru_history_file					*g:mru_history_file*
	Type:    |String|
	Default: (|mru.vim| DOES NOT provide default config)

	You have to set available and writeable file path in this variable.
	If this variable isn't set, this variable is empty or the file isn't
	available, |mru.vim| becomes unavailable.

g:mru_ignore_pattern					*g:mru_ignore_pattern*
	Type:    |List|
	Default: ['\.git']

	Every file that its name matches at one even of these won't added into
	the MRU history. To disable default, set this variable to [] (empty
	list).
	NOTE: |mru.vim| uses |match()| to check whether |mru.vim| should ignore
	a file or not.

g:mru_history_max					*g:mru_history_max*
	Type:    |Number|
	Default: 300

	The max number of MRU history count.
	You can set so big number, but it may slow down your Vim when
	filtering MRU files via |gram.vim| interface and opening files.

				*g:mru_auto_delete_unexist_file_history*
g:mru_auto_delete_unexist_file_history
	Type:    |Number|
	Default: 0

	If non-zero is set, |mru.vim| calls
	|vimrc#mru#delete_unexist_file_history()| in |vimrc#mru#start()|
	automatically.

------------------------------------------------------------------------------
MAPPINGS							*mru-mappings*
	|mru.vim| provides no mappings.


==============================================================================
shcmd.vim						*shcmd.vim*
	|shcmd.vim| is a tiny file operation command family.

------------------------------------------------------------------------------
COMMANDS						*shcmd-commands*

:Ls[!][{directory}]					*shcmd-Ls* *:Ls*
	 Show a directory's contents like 'ls' command in shells.
	 If '!' is provided, this shows hidden files. In other words, '!' is
	 to this what '-a' option is to 'ls' command in shells.
	 If {directory} provided, this shows the directory's contents;
	 Otherwise, this shows current directory's contents.

:Mkdir[!] {directories}				*shcmd-Mkdir* *:Mkdir*
	 Make directories like 'mkdir' command in shells.
	 If '!' is provided, this makes intermidiate directories. In other
	 words, '!' is to this what '-p' option is to 'mkdir' command in shells.

:Touch {files}					*shcmd-Touch* *:Touch*
	Make files like 'touch' command in shells.

:CpFile [{copy-from}] {copy-to}			*shcmd-CpFile* *:CpFile*
	 Copy a file like 'cp' command in shells, but unlike 'cp', this command
	won't copy directories.
	 If {copy-from} is omitted, this copies current buffer's contents to
	{copy-to}.

:Rm[!] {files}						*shcmd-Rm* *:Rm*
	 Delete files or directories like 'rm' command in shells.
	 If '!' is provided, this recognizes arguments as directorys' names;
	 Otherwise this recognizes them as files' names. In other words, '!' is
	 to this what '-r' option is to 'rm' command in shells.


==============================================================================
vimrc							*vimrc-mityu*


------------------------------------------------------------------------------
COMMANDS						*vimrc-commands*

NOTE: Following :WorkingPlugin* commands are applied for a directory,
/path/to/.vim/workplace/{plugin-name} .
NOTE: In the following, $WORKPLACE means the directory,
/path/to/.vim/workplace .

:WorkingPluginLoad {plugin-name} ...			*:WorkingPluginLoad*
	Load plugins, like |:packadd|, but before loading plugins,
	this command deletes load-guard variables.

:WorkingPluginCd[!] {plugin-name}			*:WorkingPluginCd*
	Execute `:cd $WORKPLACE/{plugin-name}` .
	However, if ! is provided, it uses |:lcd| instead of |:cd|.

:WorkingPluginClone {repository} [{plugin-name}]	*:WorkingPluginClone*
	Clone {repository} into $WORKPLACE/{plugin-name} .
	{repository} is a github.com's repository URL, but not a full URL. You
	should use URL begin with user name, like plugin managers.
	If {plugin-name} doesn't provided, {plugin-name} is created from
	{repository} like raw `git clone` command.

:WorkiingpluginRm {plugin-name} ...			*:WorkingPluginRm*
	Delete $WORKPLACE/{plugin-name} .


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:nosta:noet
